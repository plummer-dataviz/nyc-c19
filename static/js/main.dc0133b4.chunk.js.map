{"version":3,"sources":["ChartsContainer.js","App.js","serviceWorker.js","index.js"],"names":["margin","sanitizeCounty","county","cleanData","rawData","nycData","filter","d","includes","replace","reduce","acc","curr","entries","Object","splice","massagedData","map","dates","Date","date","cases","borough","compact","buildAreaChart","node","data","activeBorough","svg","nestedData","d3","key","xScale","domain","range","yScale","sumBy","values","nice","xAxis","children","length","append","attr","call","Set","color","selectAll","join","enter","update","exit","remove","selection","transition","duration","x","y0","y1","test","find","text","drawArea","ChartsContainer","useState","setData","mapData","setMapData","setActiveBorough","mapRef","useCallback","projection","parallels","rotate","fitSize","path","features","properties","name","on","centroid","style","buildMap","areaRef","useEffect","a","response","fetchData","fetchMapData","className","ref","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dc0133b4.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport * as d3 from \"d3\";\nimport { find, compact, sumBy } from \"lodash\";\nimport \"./App.css\";\n\nconst width = 1080;\nconst height = 550;\nconst margin = { top: 20, bottom: 20, left: 40, right: 40 };\n\nfunction buildMap(node, mapData, data, setActiveBorough, activeBorough) {\n  const projection = d3\n    .geoConicConformal()\n    .parallels([33, 45])\n    .rotate([96, -39])\n    .fitSize([width / 1.1, height / 1.1], mapData);\n\n  const path = d3.geoPath().projection(projection);\n\n  let svg;\n  if (!node.children.length) {\n    svg = d3\n      .select(node)\n      .append(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n  } else {\n    svg = d3.select(node.children[0]);\n  }\n\n  const boroughs = svg\n    .selectAll(\".borough\")\n    .data(mapData.features)\n    .join(\"path\")\n    .attr(\"d\", path)\n    .attr(\"class\", \"borough\")\n    .attr(\"fill\", d => {\n      if (!activeBorough) {\n        return \"rgb(255, 213, 210)\";\n      }\n      if (activeBorough === d.properties.name) {\n        return \"rgb(255, 213, 210)\";\n      }\n      return \"#e8e8e8\";\n    })\n    .on(\"mouseover\", d => {\n      setActiveBorough(d.properties.name);\n    });\n\n  boroughs.append(\"title\").text(d => d.properties.name);\n\n  const labels = svg\n    .append(\"g\")\n    .selectAll(\".label\")\n    .data(mapData.features)\n    .enter()\n    .append(\"text\")\n    .attr(\"class\", \"halo\")\n    .attr(\"transform\", function(d) {\n      return \"translate(\" + path.centroid(d) + \")\";\n    })\n    .style(\"text-anchor\", \"middle\")\n    .text(function(d) {\n      return d.properties.name;\n    });\n\n  // const color = d3\n  //   .scaleLinear()\n  //   .domain([0, false === \"cases-per-capita\" ? 0.001 : 0.0001])\n  //   .interpolate(() => d3.interpolateOranges);\n}\n\nfunction sanitizeCounty(county) {\n  switch (county) {\n    case \"Kings\":\n      return \"Brooklyn\";\n    case \"New York\":\n      return \"Manhattan\";\n    case \"Richmond\":\n      return \"Staten Island\";\n    default:\n      return county;\n  }\n}\n\nfunction cleanData(rawData) {\n  let nycData = rawData\n    .filter(d => {\n      return [\"Kings\", \"New York\", \"Bronx\", \"Queens\", \"Richmond\"].includes(\n        d[\"County Name\"].replace(\" County\", \"\")\n      );\n    })\n    .filter(d => d[\"State\"] === \"NY\");\n  nycData = nycData.reduce((acc, curr) => {\n    const entries = Object.entries(curr);\n    entries.splice(0, 4);\n    const massagedData = entries.map(dates => {\n      if (new Date(dates[0]) < new Date(\"2020-03-07\")) return null;\n      return {\n        date: new Date(dates[0]),\n        cases: dates[1],\n        borough: sanitizeCounty(curr[\"County Name\"].replace(\" County\", \"\"))\n      };\n    });\n    acc = [...acc, ...massagedData];\n    return acc;\n  }, []);\n  return compact(nycData);\n}\n\nfunction buildAreaChart(node, data, activeBorough) {\n  const nestedData = d3\n    .nest()\n    .key(function(d) {\n      return d.date;\n    })\n    .entries(data);\n  const xScale = d3\n    .scaleTime()\n    .domain(d3.extent(data, d => d.date))\n    .range([margin.left, width - margin.right]);\n\n  const yScale = d3\n    .scaleLinear()\n    .domain([0, d3.max(nestedData, d => sumBy(d.values, \"cases\"))])\n    .nice()\n    .range([height - margin.bottom, margin.top]);\n\n  const xAxis = d3.axisBottom(xScale);\n  let svg;\n  if (!node.children.length) {\n    svg = d3\n      .select(node)\n      .append(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n\n    svg\n      .append(\"g\")\n      .attr(\"class\", \"axis x-axis\")\n      .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n      .call(xAxis)\n      .append(\"text\")\n      .attr(\"class\", \"axis-label\")\n      .attr(\"x\", \"50%\")\n      .attr(\"dy\", \"3em\");\n\n    svg\n      .append(\"g\")\n      .attr(\"class\", \"axis y-axis\")\n      .attr(\"transform\", `translate(${width - margin.right}, 0)`)\n      .call(d3.axisRight(yScale))\n      .append(\"text\")\n      .attr(\"class\", \"axis-label\")\n      .attr(\"y\", \"50%\")\n      .attr(\"dx\", \"-3em\")\n      .attr(\"writing-mode\", \"vertical-rl\");\n  } else {\n    svg = d3.select(node.children[0]);\n  }\n\n  drawArea(svg, data, xScale, yScale, activeBorough);\n}\n\nfunction drawArea(svg, data, xScale, yScale, activeBorough) {\n  const boroughs = [...new Set(data.map(d => d.borough))];\n  const nestedData = d3\n    .nest()\n    .key(function(d) {\n      return d.date;\n    })\n    .entries(data);\n  // const stack = d3\n  //   .stack()\n  //   .keys(boroughs)\n  //   .value((d, k) => {\n  //     return find(d.values, \"borough\", k).cases;\n  //   })(nestedData);\n\n  let color = key => {\n    if (!activeBorough) {\n      return \"rgb(255, 213, 210)\";\n    }\n    if (activeBorough === key) {\n      return \"rgb(255, 213, 210)\";\n    }\n    return \"#e8e8e8\";\n  };\n\n  svg\n    .selectAll(`path.area`)\n    .data([nestedData])\n    .join(\n      enter => enter.append(\"path\").attr(\"fill-opacity\", 0),\n      update => update,\n      exit => exit.remove()\n    )\n    .call(selection => {\n      selection\n        .transition()\n        .duration(1000)\n        .attr(\"fill-opacity\", 1)\n        .attr(\"fill\", ({ key }) => color(key))\n        .attr(\"stroke\", \"none\")\n        .attr(\"class\", d => {\n          return `area ${activeBorough} active`;\n        })\n        .attr(\n          \"d\",\n          d3\n            .area()\n            .x(d => {\n              return xScale(new Date(d.key));\n            })\n            .y0(d => {\n              return yScale(0);\n            })\n            .y1(d => {\n              let test = find(d.values, { borough: activeBorough })?.cases;\n              if (!activeBorough) {\n                test = sumBy(d.values, \"cases\");\n              }\n              return yScale(test);\n            })\n        );\n    })\n    .append(\"title\")\n    .text(({ key }) => key);\n\n  svg\n    .selectAll(`path.totalArea`)\n    .data([nestedData])\n    .join(\n      enter => enter.append(\"path\").attr(\"fill-opacity\", 0),\n      update => update,\n      exit => exit.remove()\n    )\n    .call(selection => {\n      selection\n        .attr(\"fill-opacity\", 0.3)\n        .attr(\"fill\", d => color(d))\n        .attr(\"stroke\", \"none\")\n        .attr(\"class\", d => {\n          return `area total`;\n        })\n        .attr(\n          \"d\",\n          d3\n            .area()\n            .x(d => {\n              return xScale(new Date(d.key));\n            })\n            .y0(d => {\n              return yScale(0);\n            })\n            .y1(d => {\n              let y1 = sumBy(d.values, \"cases\");\n\n              return yScale(y1);\n            })\n        );\n    })\n    .append(\"title\")\n    .text(({ key }) => key);\n\n  // svg\n  //   .selectAll(\"text.inline-label.cases\")\n  //   .data(nestedData)\n  //   .join(\"text\")\n  //   .attr(\"class\", \"inline-label cases\")\n  //   .attr(\"visibility\", \"hidden\")\n  //   .attr(\"dx\", d => {\n  //     let cases =\n  //       find(d.values, { borough: activeBorough })?.cases ||\n  //       sumBy(d.values, \"cases\");\n  //     return `${cases}em`;\n  //   })\n\n  //   .attr(\"dy\", \"-0.5em\")\n  //   .attr(\"x\", d => {\n  //     xScale(new Date(d.key));\n  //   })\n  //   .attr(\"y\", d => d3.max([yScale(0), yScale(sumBy(d.values, \"cases\"))]))\n  //   .text(d => {\n  //     let cases =\n  //       find(d.values, { borough: activeBorough })?.cases ||\n  //       sumBy(d.values, \"cases\");\n  //       return cases;\n  //   })\n  //   .attr(\"visibility\", \"visible\")\n  //   .call(text =>\n  //     text\n  //       .filter((d, i, data) => i === data.length - 1)\n  //       .append(\"tspan\")\n  //       .attr(\"font-weight\", \"bold\")\n  //       .text(\n  //         d =>\n  //           \" \" +\n  //           (find(d.values, { borough: activeBorough })?.cases <= 1\n  //             ? \"case\"\n  //             : \"cases\")\n  //       )\n  //   );\n}\n\nfunction ChartsContainer() {\n  const [data, setData] = useState(null);\n  const [mapData, setMapData] = useState(null);\n  const [activeBorough, setActiveBorough] = useState(null);\n  const mapRef = useCallback(\n    node => {\n      if (node !== null && mapData !== null && data != null) {\n        buildMap(node, mapData, data, setActiveBorough, activeBorough);\n      }\n    },\n    [mapData, data, activeBorough]\n  );\n  const areaRef = useCallback(\n    node => {\n      if (node !== null && data != null) {\n        buildAreaChart(node, data, activeBorough);\n      }\n    },\n    [data, activeBorough]\n  );\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await d3.csv(\n        \"./covid_confirmed_usafacts.csv\",\n        d3.autoType\n      );\n      const nycData = cleanData(response);\n\n      setData(nycData);\n    };\n    if (data === null) {\n      fetchData();\n    }\n  }, [data]);\n\n  useEffect(() => {\n    async function fetchMapData() {\n      const response = await d3.json(\"./new-york-city-boroughs.geojson.json\");\n      setMapData(response);\n    }\n    if (mapData === null) {\n      fetchMapData();\n    }\n  }, [mapData]);\n\n  return (\n    <div className=\"ChartsContainer\">\n      <header className=\"App-header\">\n        Confirmed Cases of Covid-19 by NYC Borough\n      </header>\n      <div className=\"MapsContainer\" ref={mapRef} />\n      <div className=\"AreaContainer\" ref={areaRef} />\n    </div>\n  );\n}\n\nexport default ChartsContainer;\n","import React from \"react\";\nimport \"./App.css\";\nimport ChartsContainer from \"./ChartsContainer.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\"> \n      <ChartsContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}